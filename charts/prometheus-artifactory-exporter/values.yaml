global: {}
  # imagePullSecrets:
  #   - myRegistryKeySecretName

# Default values for artifactory-exporter.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.
replicaCount: 1

rbac:
  # Specifies whether RBAC resources should be created
  create: true
  pspEnabled: true
  pspUseAppArmor: true
serviceAccount:
  # Specifies whether a ServiceAccount should be created
  create: true
  # The name of the ServiceAccount to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

image:
  registry: ghcr.io
  repository: peimanja/artifactory_exporter
  # set to canary for the latest unreleased version
  tag: v1.16.0
  pullPolicy: IfNotPresent

# imagePullSecrets:
#   - myRegistryKeySecretName

nameOverride: ""
fullnameOverride: ""

podAnnotations: {}

# Add your artifactory server details here
# user/pass or accessToken with admin permission hast to be set
# or set the existingSecret
artifactory:
  url: http://artifactory:8081/artifactory
  user: ""
  pass: ""
  accessToken: "xxxxxxxxxxxxxxxxxxxxxxxx"
  existingSecret: false

# visit https://github.com/peimanja/artifactory_exporter#flags
options:
  logLevel: info
  logFormat: logfmt
  telemetryPath: /metrics
  verifySSL: false
  timeout: 5s
  useCache: false
  cacheTimeout: 30s
  cacheTTL: 5m
  # Some metrics are expensive to collect, so they are disabled by default.
  # visit https://github.com/peimanja/artifactory_exporter#optional-metrics for more details
  optionalMetrics: []
    # - artifacts # enables artifactory_artifacts_* metrics
    # - replication_status # adds the `status` label to `artifactory_replication_enabled` metric
    # - federation_status # enables `artifactory_federation_*` metrics
    # - open_metrics # exposes pen Metrics from the JFrog Platform
    # - access_federation_validate # enables JFrog Access Federation validation status metric
  accessFederationTarget: ""

service:
  type: ClusterIP
  port: 9531
  annotations: {}

ingress:
  enabled: false
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  path: /
  hosts:
    - chart-example.local
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #     - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #  cpu: 100m
  #  memory: 128Mi
  # requests:
  #  cpu: 100m
  #  memory: 128Mi

serviceMonitor:
  # When set true then use a ServiceMonitor to configure scraping
  enabled: false
  # Set the namespace the ServiceMonitor should be deployed
  # namespace: monitoring
  # Set how frequently Prometheus should scrape
  # interval: 30s
  # Set path to artifactory-exporter telemtery-path
  # telemetryPath: /metrics
  # Set labels for the ServiceMonitor, use this to define your scrape label for Prometheus Operator
  # labels:
  # Set timeout for scrape
  # timeout: 10s
  # Set of labels to transfer on the Kubernetes Service onto the target.
  # targetLabels: []
  # metricRelabelings: []

priorityClassName: ""

podSecurityContext: {}
# fsGroup: 1000

podMonitoring:
  ## If true, a PodMonitoring CR is created for google managed prometheus
  ## https://cloud.google.com/stackdriver/docs/managed-prometheus/setup-managed#gmp-pod-monitoring
  ##
  selfMonitor:
    enabled: false
    additionalMetricsRelabels: {}
    labels: {}
    path: /metrics
    interval: 30s
    scrapeTimeout: 30s

  ## If true, a PodMonitoring CR is created for a google managed prometheus
  ## https://cloud.google.com/stackdriver/docs/managed-prometheus/setup-managed#gmp-pod-monitoring for each target
  ##
  enabled: false

  ## Default values that will be used for all PodMonitoring created by `targets`
  ## Following PodMonitoring API specs https://github.com/GoogleCloudPlatform/prometheus-engine/blob/main/doc/api.md#scrapeendpoint
  defaults:
    additionalMetricsRelabels: {}
    labels: {}
    interval: 30s
    scrapeTimeout: 30s
    module: http_2xx
  ## scheme: Protocol scheme to use to scrape.
  scheme: http
  ## path: HTTP path. Needs to be adjusted, if web.route-prefix is set
  path: "/probe"
  ## tlsConfig: TLS configuration to use when scraping the endpoint. For example if using istio mTLS.
  ## Of type: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#tlsconfig
  tlsConfig: {}

## User and Group to run artifactory-exporter container as
securityContext:
  runAsUser: 1000
  runAsGroup: 1000
  readOnlyRootFilesystem: true
  runAsNonRoot: true
  allowPrivilegeEscalation: false
  seccompProfile:
    type: RuntimeDefault
  capabilities:
    drop: ["ALL"]

nodeSelector: {}

tolerations: []

affinity: {}

# Extra environment variables
extraEnv: []

# Init Containers for Exporter Pod
initContainers: []

# Extra containers for the exporter pod
extraContainers: []

# Extra labels for the exporter deployment
extraDeploymentLabels: {}

# Extra labels for the exporter pod
extraPodLabels: {}

# Extra Volumes for the pod
extraVolumes: []
# - name: example
#   configMap:
#     name: example

# Extra Volume Mounts for the exporter container
extraVolumeMounts: []
# - name: example
#   mountPath: /example
